/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package bri.avro.kafka.flatten.dto;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Schema for bri.avro.kafka.playground.dto.client */
@org.apache.avro.specific.AvroGenerated
public class Client extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4004758414551277968L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Client\",\"namespace\":\"bri.avro.kafka.flatten.dto\",\"doc\":\"Schema for bri.avro.kafka.playground.dto.client\",\"fields\":[{\"name\":\"status\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"unusedid\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"timestamp\",\"type\":\"long\"},{\"name\":\"pet\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},\"default\":[]},{\"name\":\"name\",\"type\":{\"type\":\"record\",\"name\":\"Name\",\"fields\":[{\"name\":\"firstname\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"First Name of the client\"},{\"name\":\"lastname\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Last Name of the client\"},{\"name\":\"middlename\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Middle name of the client\"},{\"name\":\"shortname\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Short name of the client\"}]}},{\"name\":\"address\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Address\",\"fields\":[{\"name\":\"type\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Primary, Secondary,...\"},{\"name\":\"address\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"postalCode\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"postalArea\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"country\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]}]}},\"doc\":\"Client address(es)\",\"default\":[]},{\"name\":\"Email\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Email\",\"fields\":[{\"name\":\"type\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Primary, Secondary\"},{\"name\":\"email\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Client email address\"}]}},\"doc\":\"Client email(s)\",\"default\":[]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Client> ENCODER =
      new BinaryMessageEncoder<Client>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Client> DECODER =
      new BinaryMessageDecoder<Client>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Client> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Client> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Client> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Client>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Client to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Client from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Client instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Client fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.String status;
  @Deprecated public java.lang.String id;
  @Deprecated public java.lang.String unusedid;
  @Deprecated public long timestamp;
  @Deprecated public java.util.List<java.lang.String> pet;
  @Deprecated public bri.avro.kafka.flatten.dto.Name name;
  /** Client address(es) */
  @Deprecated public java.util.List<bri.avro.kafka.flatten.dto.Address> address;
  /** Client email(s) */
  @Deprecated public java.util.List<bri.avro.kafka.flatten.dto.Email> Email;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Client() {}

  /**
   * All-args constructor.
   * @param status The new value for status
   * @param id The new value for id
   * @param unusedid The new value for unusedid
   * @param timestamp The new value for timestamp
   * @param pet The new value for pet
   * @param name The new value for name
   * @param address Client address(es)
   * @param Email Client email(s)
   */
  public Client(java.lang.String status, java.lang.String id, java.lang.String unusedid, java.lang.Long timestamp, java.util.List<java.lang.String> pet, bri.avro.kafka.flatten.dto.Name name, java.util.List<bri.avro.kafka.flatten.dto.Address> address, java.util.List<bri.avro.kafka.flatten.dto.Email> Email) {
    this.status = status;
    this.id = id;
    this.unusedid = unusedid;
    this.timestamp = timestamp;
    this.pet = pet;
    this.name = name;
    this.address = address;
    this.Email = Email;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return status;
    case 1: return id;
    case 2: return unusedid;
    case 3: return timestamp;
    case 4: return pet;
    case 5: return name;
    case 6: return address;
    case 7: return Email;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: status = value$ != null ? value$.toString() : null; break;
    case 1: id = value$ != null ? value$.toString() : null; break;
    case 2: unusedid = value$ != null ? value$.toString() : null; break;
    case 3: timestamp = (java.lang.Long)value$; break;
    case 4: pet = (java.util.List<java.lang.String>)value$; break;
    case 5: name = (bri.avro.kafka.flatten.dto.Name)value$; break;
    case 6: address = (java.util.List<bri.avro.kafka.flatten.dto.Address>)value$; break;
    case 7: Email = (java.util.List<bri.avro.kafka.flatten.dto.Email>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'status' field.
   * @return The value of the 'status' field.
   */
  public java.lang.String getStatus() {
    return status;
  }


  /**
   * Sets the value of the 'status' field.
   * @param value the value to set.
   */
  public void setStatus(java.lang.String value) {
    this.status = value;
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.String getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.String value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'unusedid' field.
   * @return The value of the 'unusedid' field.
   */
  public java.lang.String getUnusedid() {
    return unusedid;
  }


  /**
   * Sets the value of the 'unusedid' field.
   * @param value the value to set.
   */
  public void setUnusedid(java.lang.String value) {
    this.unusedid = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public long getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'pet' field.
   * @return The value of the 'pet' field.
   */
  public java.util.List<java.lang.String> getPet() {
    return pet;
  }


  /**
   * Sets the value of the 'pet' field.
   * @param value the value to set.
   */
  public void setPet(java.util.List<java.lang.String> value) {
    this.pet = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public bri.avro.kafka.flatten.dto.Name getName() {
    return name;
  }


  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(bri.avro.kafka.flatten.dto.Name value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'address' field.
   * @return Client address(es)
   */
  public java.util.List<bri.avro.kafka.flatten.dto.Address> getAddress() {
    return address;
  }


  /**
   * Sets the value of the 'address' field.
   * Client address(es)
   * @param value the value to set.
   */
  public void setAddress(java.util.List<bri.avro.kafka.flatten.dto.Address> value) {
    this.address = value;
  }

  /**
   * Gets the value of the 'Email' field.
   * @return Client email(s)
   */
  public java.util.List<bri.avro.kafka.flatten.dto.Email> getEmail() {
    return Email;
  }


  /**
   * Sets the value of the 'Email' field.
   * Client email(s)
   * @param value the value to set.
   */
  public void setEmail(java.util.List<bri.avro.kafka.flatten.dto.Email> value) {
    this.Email = value;
  }

  /**
   * Creates a new Client RecordBuilder.
   * @return A new Client RecordBuilder
   */
  public static bri.avro.kafka.flatten.dto.Client.Builder newBuilder() {
    return new bri.avro.kafka.flatten.dto.Client.Builder();
  }

  /**
   * Creates a new Client RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Client RecordBuilder
   */
  public static bri.avro.kafka.flatten.dto.Client.Builder newBuilder(bri.avro.kafka.flatten.dto.Client.Builder other) {
    if (other == null) {
      return new bri.avro.kafka.flatten.dto.Client.Builder();
    } else {
      return new bri.avro.kafka.flatten.dto.Client.Builder(other);
    }
  }

  /**
   * Creates a new Client RecordBuilder by copying an existing Client instance.
   * @param other The existing instance to copy.
   * @return A new Client RecordBuilder
   */
  public static bri.avro.kafka.flatten.dto.Client.Builder newBuilder(bri.avro.kafka.flatten.dto.Client other) {
    if (other == null) {
      return new bri.avro.kafka.flatten.dto.Client.Builder();
    } else {
      return new bri.avro.kafka.flatten.dto.Client.Builder(other);
    }
  }

  /**
   * RecordBuilder for Client instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Client>
    implements org.apache.avro.data.RecordBuilder<Client> {

    private java.lang.String status;
    private java.lang.String id;
    private java.lang.String unusedid;
    private long timestamp;
    private java.util.List<java.lang.String> pet;
    private bri.avro.kafka.flatten.dto.Name name;
    private bri.avro.kafka.flatten.dto.Name.Builder nameBuilder;
    /** Client address(es) */
    private java.util.List<bri.avro.kafka.flatten.dto.Address> address;
    /** Client email(s) */
    private java.util.List<bri.avro.kafka.flatten.dto.Email> Email;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(bri.avro.kafka.flatten.dto.Client.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.status)) {
        this.status = data().deepCopy(fields()[0].schema(), other.status);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.id)) {
        this.id = data().deepCopy(fields()[1].schema(), other.id);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.unusedid)) {
        this.unusedid = data().deepCopy(fields()[2].schema(), other.unusedid);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.pet)) {
        this.pet = data().deepCopy(fields()[4].schema(), other.pet);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.name)) {
        this.name = data().deepCopy(fields()[5].schema(), other.name);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (other.hasNameBuilder()) {
        this.nameBuilder = bri.avro.kafka.flatten.dto.Name.newBuilder(other.getNameBuilder());
      }
      if (isValidValue(fields()[6], other.address)) {
        this.address = data().deepCopy(fields()[6].schema(), other.address);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.Email)) {
        this.Email = data().deepCopy(fields()[7].schema(), other.Email);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
    }

    /**
     * Creates a Builder by copying an existing Client instance
     * @param other The existing instance to copy.
     */
    private Builder(bri.avro.kafka.flatten.dto.Client other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.status)) {
        this.status = data().deepCopy(fields()[0].schema(), other.status);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.id)) {
        this.id = data().deepCopy(fields()[1].schema(), other.id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.unusedid)) {
        this.unusedid = data().deepCopy(fields()[2].schema(), other.unusedid);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.pet)) {
        this.pet = data().deepCopy(fields()[4].schema(), other.pet);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.name)) {
        this.name = data().deepCopy(fields()[5].schema(), other.name);
        fieldSetFlags()[5] = true;
      }
      this.nameBuilder = null;
      if (isValidValue(fields()[6], other.address)) {
        this.address = data().deepCopy(fields()[6].schema(), other.address);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.Email)) {
        this.Email = data().deepCopy(fields()[7].schema(), other.Email);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'status' field.
      * @return The value.
      */
    public java.lang.String getStatus() {
      return status;
    }


    /**
      * Sets the value of the 'status' field.
      * @param value The value of 'status'.
      * @return This builder.
      */
    public bri.avro.kafka.flatten.dto.Client.Builder setStatus(java.lang.String value) {
      validate(fields()[0], value);
      this.status = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'status' field.
      * @return This builder.
      */
    public bri.avro.kafka.flatten.dto.Client.Builder clearStatus() {
      status = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.String getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public bri.avro.kafka.flatten.dto.Client.Builder setId(java.lang.String value) {
      validate(fields()[1], value);
      this.id = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public bri.avro.kafka.flatten.dto.Client.Builder clearId() {
      id = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'unusedid' field.
      * @return The value.
      */
    public java.lang.String getUnusedid() {
      return unusedid;
    }


    /**
      * Sets the value of the 'unusedid' field.
      * @param value The value of 'unusedid'.
      * @return This builder.
      */
    public bri.avro.kafka.flatten.dto.Client.Builder setUnusedid(java.lang.String value) {
      validate(fields()[2], value);
      this.unusedid = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'unusedid' field has been set.
      * @return True if the 'unusedid' field has been set, false otherwise.
      */
    public boolean hasUnusedid() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'unusedid' field.
      * @return This builder.
      */
    public bri.avro.kafka.flatten.dto.Client.Builder clearUnusedid() {
      unusedid = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public long getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public bri.avro.kafka.flatten.dto.Client.Builder setTimestamp(long value) {
      validate(fields()[3], value);
      this.timestamp = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public bri.avro.kafka.flatten.dto.Client.Builder clearTimestamp() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'pet' field.
      * @return The value.
      */
    public java.util.List<java.lang.String> getPet() {
      return pet;
    }


    /**
      * Sets the value of the 'pet' field.
      * @param value The value of 'pet'.
      * @return This builder.
      */
    public bri.avro.kafka.flatten.dto.Client.Builder setPet(java.util.List<java.lang.String> value) {
      validate(fields()[4], value);
      this.pet = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'pet' field has been set.
      * @return True if the 'pet' field has been set, false otherwise.
      */
    public boolean hasPet() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'pet' field.
      * @return This builder.
      */
    public bri.avro.kafka.flatten.dto.Client.Builder clearPet() {
      pet = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public bri.avro.kafka.flatten.dto.Name getName() {
      return name;
    }


    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public bri.avro.kafka.flatten.dto.Client.Builder setName(bri.avro.kafka.flatten.dto.Name value) {
      validate(fields()[5], value);
      this.nameBuilder = null;
      this.name = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[5];
    }

    /**
     * Gets the Builder instance for the 'name' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public bri.avro.kafka.flatten.dto.Name.Builder getNameBuilder() {
      if (nameBuilder == null) {
        if (hasName()) {
          setNameBuilder(bri.avro.kafka.flatten.dto.Name.newBuilder(name));
        } else {
          setNameBuilder(bri.avro.kafka.flatten.dto.Name.newBuilder());
        }
      }
      return nameBuilder;
    }

    /**
     * Sets the Builder instance for the 'name' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public bri.avro.kafka.flatten.dto.Client.Builder setNameBuilder(bri.avro.kafka.flatten.dto.Name.Builder value) {
      clearName();
      nameBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'name' field has an active Builder instance
     * @return True if the 'name' field has an active Builder instance
     */
    public boolean hasNameBuilder() {
      return nameBuilder != null;
    }

    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public bri.avro.kafka.flatten.dto.Client.Builder clearName() {
      name = null;
      nameBuilder = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'address' field.
      * Client address(es)
      * @return The value.
      */
    public java.util.List<bri.avro.kafka.flatten.dto.Address> getAddress() {
      return address;
    }


    /**
      * Sets the value of the 'address' field.
      * Client address(es)
      * @param value The value of 'address'.
      * @return This builder.
      */
    public bri.avro.kafka.flatten.dto.Client.Builder setAddress(java.util.List<bri.avro.kafka.flatten.dto.Address> value) {
      validate(fields()[6], value);
      this.address = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'address' field has been set.
      * Client address(es)
      * @return True if the 'address' field has been set, false otherwise.
      */
    public boolean hasAddress() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'address' field.
      * Client address(es)
      * @return This builder.
      */
    public bri.avro.kafka.flatten.dto.Client.Builder clearAddress() {
      address = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'Email' field.
      * Client email(s)
      * @return The value.
      */
    public java.util.List<bri.avro.kafka.flatten.dto.Email> getEmail() {
      return Email;
    }


    /**
      * Sets the value of the 'Email' field.
      * Client email(s)
      * @param value The value of 'Email'.
      * @return This builder.
      */
    public bri.avro.kafka.flatten.dto.Client.Builder setEmail(java.util.List<bri.avro.kafka.flatten.dto.Email> value) {
      validate(fields()[7], value);
      this.Email = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'Email' field has been set.
      * Client email(s)
      * @return True if the 'Email' field has been set, false otherwise.
      */
    public boolean hasEmail() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'Email' field.
      * Client email(s)
      * @return This builder.
      */
    public bri.avro.kafka.flatten.dto.Client.Builder clearEmail() {
      Email = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Client build() {
      try {
        Client record = new Client();
        record.status = fieldSetFlags()[0] ? this.status : (java.lang.String) defaultValue(fields()[0]);
        record.id = fieldSetFlags()[1] ? this.id : (java.lang.String) defaultValue(fields()[1]);
        record.unusedid = fieldSetFlags()[2] ? this.unusedid : (java.lang.String) defaultValue(fields()[2]);
        record.timestamp = fieldSetFlags()[3] ? this.timestamp : (java.lang.Long) defaultValue(fields()[3]);
        record.pet = fieldSetFlags()[4] ? this.pet : (java.util.List<java.lang.String>) defaultValue(fields()[4]);
        if (nameBuilder != null) {
          try {
            record.name = this.nameBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("name"));
            throw e;
          }
        } else {
          record.name = fieldSetFlags()[5] ? this.name : (bri.avro.kafka.flatten.dto.Name) defaultValue(fields()[5]);
        }
        record.address = fieldSetFlags()[6] ? this.address : (java.util.List<bri.avro.kafka.flatten.dto.Address>) defaultValue(fields()[6]);
        record.Email = fieldSetFlags()[7] ? this.Email : (java.util.List<bri.avro.kafka.flatten.dto.Email>) defaultValue(fields()[7]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Client>
    WRITER$ = (org.apache.avro.io.DatumWriter<Client>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Client>
    READER$ = (org.apache.avro.io.DatumReader<Client>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.status == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.status);
    }

    out.writeString(this.id);

    out.writeString(this.unusedid);

    out.writeLong(this.timestamp);

    long size0 = this.pet.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (java.lang.String e0: this.pet) {
      actualSize0++;
      out.startItem();
      out.writeString(e0);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    this.name.customEncode(out);

    long size1 = this.address.size();
    out.writeArrayStart();
    out.setItemCount(size1);
    long actualSize1 = 0;
    for (bri.avro.kafka.flatten.dto.Address e1: this.address) {
      actualSize1++;
      out.startItem();
      e1.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize1 != size1)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");

    long size2 = this.Email.size();
    out.writeArrayStart();
    out.setItemCount(size2);
    long actualSize2 = 0;
    for (bri.avro.kafka.flatten.dto.Email e2: this.Email) {
      actualSize2++;
      out.startItem();
      e2.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize2 != size2)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size2 + ", but element count was " + actualSize2 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.status = null;
      } else {
        this.status = in.readString();
      }

      this.id = in.readString();

      this.unusedid = in.readString();

      this.timestamp = in.readLong();

      long size0 = in.readArrayStart();
      java.util.List<java.lang.String> a0 = this.pet;
      if (a0 == null) {
        a0 = new SpecificData.Array<java.lang.String>((int)size0, SCHEMA$.getField("pet").schema());
        this.pet = a0;
      } else a0.clear();
      SpecificData.Array<java.lang.String> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.String>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          java.lang.String e0 = (ga0 != null ? ga0.peek() : null);
          e0 = in.readString();
          a0.add(e0);
        }
      }

      if (this.name == null) {
        this.name = new bri.avro.kafka.flatten.dto.Name();
      }
      this.name.customDecode(in);

      long size1 = in.readArrayStart();
      java.util.List<bri.avro.kafka.flatten.dto.Address> a1 = this.address;
      if (a1 == null) {
        a1 = new SpecificData.Array<bri.avro.kafka.flatten.dto.Address>((int)size1, SCHEMA$.getField("address").schema());
        this.address = a1;
      } else a1.clear();
      SpecificData.Array<bri.avro.kafka.flatten.dto.Address> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<bri.avro.kafka.flatten.dto.Address>)a1 : null);
      for ( ; 0 < size1; size1 = in.arrayNext()) {
        for ( ; size1 != 0; size1--) {
          bri.avro.kafka.flatten.dto.Address e1 = (ga1 != null ? ga1.peek() : null);
          if (e1 == null) {
            e1 = new bri.avro.kafka.flatten.dto.Address();
          }
          e1.customDecode(in);
          a1.add(e1);
        }
      }

      long size2 = in.readArrayStart();
      java.util.List<bri.avro.kafka.flatten.dto.Email> a2 = this.Email;
      if (a2 == null) {
        a2 = new SpecificData.Array<bri.avro.kafka.flatten.dto.Email>((int)size2, SCHEMA$.getField("Email").schema());
        this.Email = a2;
      } else a2.clear();
      SpecificData.Array<bri.avro.kafka.flatten.dto.Email> ga2 = (a2 instanceof SpecificData.Array ? (SpecificData.Array<bri.avro.kafka.flatten.dto.Email>)a2 : null);
      for ( ; 0 < size2; size2 = in.arrayNext()) {
        for ( ; size2 != 0; size2--) {
          bri.avro.kafka.flatten.dto.Email e2 = (ga2 != null ? ga2.peek() : null);
          if (e2 == null) {
            e2 = new bri.avro.kafka.flatten.dto.Email();
          }
          e2.customDecode(in);
          a2.add(e2);
        }
      }

    } else {
      for (int i = 0; i < 8; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.status = null;
          } else {
            this.status = in.readString();
          }
          break;

        case 1:
          this.id = in.readString();
          break;

        case 2:
          this.unusedid = in.readString();
          break;

        case 3:
          this.timestamp = in.readLong();
          break;

        case 4:
          long size0 = in.readArrayStart();
          java.util.List<java.lang.String> a0 = this.pet;
          if (a0 == null) {
            a0 = new SpecificData.Array<java.lang.String>((int)size0, SCHEMA$.getField("pet").schema());
            this.pet = a0;
          } else a0.clear();
          SpecificData.Array<java.lang.String> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.String>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              java.lang.String e0 = (ga0 != null ? ga0.peek() : null);
              e0 = in.readString();
              a0.add(e0);
            }
          }
          break;

        case 5:
          if (this.name == null) {
            this.name = new bri.avro.kafka.flatten.dto.Name();
          }
          this.name.customDecode(in);
          break;

        case 6:
          long size1 = in.readArrayStart();
          java.util.List<bri.avro.kafka.flatten.dto.Address> a1 = this.address;
          if (a1 == null) {
            a1 = new SpecificData.Array<bri.avro.kafka.flatten.dto.Address>((int)size1, SCHEMA$.getField("address").schema());
            this.address = a1;
          } else a1.clear();
          SpecificData.Array<bri.avro.kafka.flatten.dto.Address> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<bri.avro.kafka.flatten.dto.Address>)a1 : null);
          for ( ; 0 < size1; size1 = in.arrayNext()) {
            for ( ; size1 != 0; size1--) {
              bri.avro.kafka.flatten.dto.Address e1 = (ga1 != null ? ga1.peek() : null);
              if (e1 == null) {
                e1 = new bri.avro.kafka.flatten.dto.Address();
              }
              e1.customDecode(in);
              a1.add(e1);
            }
          }
          break;

        case 7:
          long size2 = in.readArrayStart();
          java.util.List<bri.avro.kafka.flatten.dto.Email> a2 = this.Email;
          if (a2 == null) {
            a2 = new SpecificData.Array<bri.avro.kafka.flatten.dto.Email>((int)size2, SCHEMA$.getField("Email").schema());
            this.Email = a2;
          } else a2.clear();
          SpecificData.Array<bri.avro.kafka.flatten.dto.Email> ga2 = (a2 instanceof SpecificData.Array ? (SpecificData.Array<bri.avro.kafka.flatten.dto.Email>)a2 : null);
          for ( ; 0 < size2; size2 = in.arrayNext()) {
            for ( ; size2 != 0; size2--) {
              bri.avro.kafka.flatten.dto.Email e2 = (ga2 != null ? ga2.peek() : null);
              if (e2 == null) {
                e2 = new bri.avro.kafka.flatten.dto.Email();
              }
              e2.customDecode(in);
              a2.add(e2);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}











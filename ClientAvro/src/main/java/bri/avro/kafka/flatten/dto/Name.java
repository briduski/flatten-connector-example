/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package bri.avro.kafka.flatten.dto;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Name extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5469955711695913881L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Name\",\"namespace\":\"bri.avro.kafka.flatten.dto\",\"fields\":[{\"name\":\"firstname\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"First Name of the client\"},{\"name\":\"lastname\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Last Name of the client\"},{\"name\":\"middlename\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Middle name of the client\"},{\"name\":\"shortname\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Short name of the client\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Name> ENCODER =
      new BinaryMessageEncoder<Name>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Name> DECODER =
      new BinaryMessageDecoder<Name>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Name> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Name> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Name> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Name>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Name to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Name from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Name instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Name fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** First Name of the client */
  @Deprecated public java.lang.String firstname;
  /** Last Name of the client */
  @Deprecated public java.lang.String lastname;
  /** Middle name of the client */
  @Deprecated public java.lang.String middlename;
  /** Short name of the client */
  @Deprecated public java.lang.String shortname;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Name() {}

  /**
   * All-args constructor.
   * @param firstname First Name of the client
   * @param lastname Last Name of the client
   * @param middlename Middle name of the client
   * @param shortname Short name of the client
   */
  public Name(java.lang.String firstname, java.lang.String lastname, java.lang.String middlename, java.lang.String shortname) {
    this.firstname = firstname;
    this.lastname = lastname;
    this.middlename = middlename;
    this.shortname = shortname;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return firstname;
    case 1: return lastname;
    case 2: return middlename;
    case 3: return shortname;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: firstname = value$ != null ? value$.toString() : null; break;
    case 1: lastname = value$ != null ? value$.toString() : null; break;
    case 2: middlename = value$ != null ? value$.toString() : null; break;
    case 3: shortname = value$ != null ? value$.toString() : null; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'firstname' field.
   * @return First Name of the client
   */
  public java.lang.String getFirstname() {
    return firstname;
  }


  /**
   * Sets the value of the 'firstname' field.
   * First Name of the client
   * @param value the value to set.
   */
  public void setFirstname(java.lang.String value) {
    this.firstname = value;
  }

  /**
   * Gets the value of the 'lastname' field.
   * @return Last Name of the client
   */
  public java.lang.String getLastname() {
    return lastname;
  }


  /**
   * Sets the value of the 'lastname' field.
   * Last Name of the client
   * @param value the value to set.
   */
  public void setLastname(java.lang.String value) {
    this.lastname = value;
  }

  /**
   * Gets the value of the 'middlename' field.
   * @return Middle name of the client
   */
  public java.lang.String getMiddlename() {
    return middlename;
  }


  /**
   * Sets the value of the 'middlename' field.
   * Middle name of the client
   * @param value the value to set.
   */
  public void setMiddlename(java.lang.String value) {
    this.middlename = value;
  }

  /**
   * Gets the value of the 'shortname' field.
   * @return Short name of the client
   */
  public java.lang.String getShortname() {
    return shortname;
  }


  /**
   * Sets the value of the 'shortname' field.
   * Short name of the client
   * @param value the value to set.
   */
  public void setShortname(java.lang.String value) {
    this.shortname = value;
  }

  /**
   * Creates a new Name RecordBuilder.
   * @return A new Name RecordBuilder
   */
  public static bri.avro.kafka.flatten.dto.Name.Builder newBuilder() {
    return new bri.avro.kafka.flatten.dto.Name.Builder();
  }

  /**
   * Creates a new Name RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Name RecordBuilder
   */
  public static bri.avro.kafka.flatten.dto.Name.Builder newBuilder(bri.avro.kafka.flatten.dto.Name.Builder other) {
    if (other == null) {
      return new bri.avro.kafka.flatten.dto.Name.Builder();
    } else {
      return new bri.avro.kafka.flatten.dto.Name.Builder(other);
    }
  }

  /**
   * Creates a new Name RecordBuilder by copying an existing Name instance.
   * @param other The existing instance to copy.
   * @return A new Name RecordBuilder
   */
  public static bri.avro.kafka.flatten.dto.Name.Builder newBuilder(bri.avro.kafka.flatten.dto.Name other) {
    if (other == null) {
      return new bri.avro.kafka.flatten.dto.Name.Builder();
    } else {
      return new bri.avro.kafka.flatten.dto.Name.Builder(other);
    }
  }

  /**
   * RecordBuilder for Name instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Name>
    implements org.apache.avro.data.RecordBuilder<Name> {

    /** First Name of the client */
    private java.lang.String firstname;
    /** Last Name of the client */
    private java.lang.String lastname;
    /** Middle name of the client */
    private java.lang.String middlename;
    /** Short name of the client */
    private java.lang.String shortname;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(bri.avro.kafka.flatten.dto.Name.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.firstname)) {
        this.firstname = data().deepCopy(fields()[0].schema(), other.firstname);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.lastname)) {
        this.lastname = data().deepCopy(fields()[1].schema(), other.lastname);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.middlename)) {
        this.middlename = data().deepCopy(fields()[2].schema(), other.middlename);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.shortname)) {
        this.shortname = data().deepCopy(fields()[3].schema(), other.shortname);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing Name instance
     * @param other The existing instance to copy.
     */
    private Builder(bri.avro.kafka.flatten.dto.Name other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.firstname)) {
        this.firstname = data().deepCopy(fields()[0].schema(), other.firstname);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.lastname)) {
        this.lastname = data().deepCopy(fields()[1].schema(), other.lastname);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.middlename)) {
        this.middlename = data().deepCopy(fields()[2].schema(), other.middlename);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.shortname)) {
        this.shortname = data().deepCopy(fields()[3].schema(), other.shortname);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'firstname' field.
      * First Name of the client
      * @return The value.
      */
    public java.lang.String getFirstname() {
      return firstname;
    }


    /**
      * Sets the value of the 'firstname' field.
      * First Name of the client
      * @param value The value of 'firstname'.
      * @return This builder.
      */
    public bri.avro.kafka.flatten.dto.Name.Builder setFirstname(java.lang.String value) {
      validate(fields()[0], value);
      this.firstname = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'firstname' field has been set.
      * First Name of the client
      * @return True if the 'firstname' field has been set, false otherwise.
      */
    public boolean hasFirstname() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'firstname' field.
      * First Name of the client
      * @return This builder.
      */
    public bri.avro.kafka.flatten.dto.Name.Builder clearFirstname() {
      firstname = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastname' field.
      * Last Name of the client
      * @return The value.
      */
    public java.lang.String getLastname() {
      return lastname;
    }


    /**
      * Sets the value of the 'lastname' field.
      * Last Name of the client
      * @param value The value of 'lastname'.
      * @return This builder.
      */
    public bri.avro.kafka.flatten.dto.Name.Builder setLastname(java.lang.String value) {
      validate(fields()[1], value);
      this.lastname = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'lastname' field has been set.
      * Last Name of the client
      * @return True if the 'lastname' field has been set, false otherwise.
      */
    public boolean hasLastname() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'lastname' field.
      * Last Name of the client
      * @return This builder.
      */
    public bri.avro.kafka.flatten.dto.Name.Builder clearLastname() {
      lastname = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'middlename' field.
      * Middle name of the client
      * @return The value.
      */
    public java.lang.String getMiddlename() {
      return middlename;
    }


    /**
      * Sets the value of the 'middlename' field.
      * Middle name of the client
      * @param value The value of 'middlename'.
      * @return This builder.
      */
    public bri.avro.kafka.flatten.dto.Name.Builder setMiddlename(java.lang.String value) {
      validate(fields()[2], value);
      this.middlename = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'middlename' field has been set.
      * Middle name of the client
      * @return True if the 'middlename' field has been set, false otherwise.
      */
    public boolean hasMiddlename() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'middlename' field.
      * Middle name of the client
      * @return This builder.
      */
    public bri.avro.kafka.flatten.dto.Name.Builder clearMiddlename() {
      middlename = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'shortname' field.
      * Short name of the client
      * @return The value.
      */
    public java.lang.String getShortname() {
      return shortname;
    }


    /**
      * Sets the value of the 'shortname' field.
      * Short name of the client
      * @param value The value of 'shortname'.
      * @return This builder.
      */
    public bri.avro.kafka.flatten.dto.Name.Builder setShortname(java.lang.String value) {
      validate(fields()[3], value);
      this.shortname = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'shortname' field has been set.
      * Short name of the client
      * @return True if the 'shortname' field has been set, false otherwise.
      */
    public boolean hasShortname() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'shortname' field.
      * Short name of the client
      * @return This builder.
      */
    public bri.avro.kafka.flatten.dto.Name.Builder clearShortname() {
      shortname = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Name build() {
      try {
        Name record = new Name();
        record.firstname = fieldSetFlags()[0] ? this.firstname : (java.lang.String) defaultValue(fields()[0]);
        record.lastname = fieldSetFlags()[1] ? this.lastname : (java.lang.String) defaultValue(fields()[1]);
        record.middlename = fieldSetFlags()[2] ? this.middlename : (java.lang.String) defaultValue(fields()[2]);
        record.shortname = fieldSetFlags()[3] ? this.shortname : (java.lang.String) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Name>
    WRITER$ = (org.apache.avro.io.DatumWriter<Name>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Name>
    READER$ = (org.apache.avro.io.DatumReader<Name>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.firstname);

    out.writeString(this.lastname);

    if (this.middlename == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.middlename);
    }

    if (this.shortname == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.shortname);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.firstname = in.readString();

      this.lastname = in.readString();

      if (in.readIndex() != 1) {
        in.readNull();
        this.middlename = null;
      } else {
        this.middlename = in.readString();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.shortname = null;
      } else {
        this.shortname = in.readString();
      }

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.firstname = in.readString();
          break;

        case 1:
          this.lastname = in.readString();
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.middlename = null;
          } else {
            this.middlename = in.readString();
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.shortname = null;
          } else {
            this.shortname = in.readString();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










